// Generated by BUCKLESCRIPT VERSION 1.7.4, PLEASE EDIT WITH CARE
'use strict';

var Curry                   = require("bs-platform/lib/js/curry.js");
var WebGlRe                 = require("bs-webapi/lib/js/src/canvas/webGlRe.js");
var Js_boolean              = require("bs-platform/lib/js/js_boolean.js");
var Js_primitive            = require("bs-platform/lib/js/js_primitive.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function andThenGL(f, param) {
  if (param) {
    return Curry._1(f, param[0]);
  } else {
    throw [
          Caml_builtin_exceptions.match_failure,
          [
            "/Users/sijietian/Documents/code/reason-three/src/index.re",
            5,
            55
          ]
        ];
  }
}

var gl = andThenGL(function (prim) {
      return prim.getContext("webgl");
    }, Js_primitive.null_to_opt(document.getElementById("reason-webgl")));

gl.clearColor(0.0, 0.8, 0.0, 1.0);

var vertexPosBuffer = gl.createBuffer();

gl.bindBuffer(WebGlRe._ARRAY_BUFFER, vertexPosBuffer);

var vertices = new Float32Array(/* float array */[
      -0.5,
      -0.5,
      0.5,
      -0.5,
      0.0,
      0.5
    ]);

gl.bufferData(WebGlRe._ARRAY_BUFFER, vertices, WebGlRe._STATIC_DRAW);

var vs = "\n attribute vec2 pos; \n void main() {\n gl_Position = vec4(pos, 0, 1);\n }";

var fs = "\n precision mediump float;\n void main() {\n gl_FragColor = vec4(0, 0.8, 0, 1);\n }";

var program = gl.createProgram();

var vertexShader = gl.createShader(WebGlRe._VERTEX_SHADER);

var fragShader = gl.createShader(WebGlRe._FRAGMENT_SHADER);

gl.shaderSource(vertexShader, vs);

gl.compileShader(vertexShader);

gl.shaderSource(fragShader, fs);

gl.compileShader(fragShader);

gl.attachShader(program, vertexShader);

gl.attachShader(program, fragShader);

gl.linkProgram(program);

gl.useProgram(program);

var vertexPos = gl.getAttribLocation(program, "pos");

gl.enableVertexAttribArray(vertexPos);

gl.vertexAttribPointer(vertexPos, 2, WebGlRe._FLOAT, Js_boolean.to_js_boolean(/* false */0), 0, 0);

gl.drawArrays(WebGlRe._TRIANGLES, 0, 3);

exports.andThenGL       = andThenGL;
exports.gl              = gl;
exports.vertexPosBuffer = vertexPosBuffer;
exports.vertices        = vertices;
exports.vs              = vs;
exports.fs              = fs;
exports.program         = program;
exports.vertexShader    = vertexShader;
exports.fragShader      = fragShader;
exports.vertexPos       = vertexPos;
/* gl Not a pure module */
